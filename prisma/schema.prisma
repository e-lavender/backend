// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("POSTGRES_URL")
  directUrl  = env("POSTGRES_DIRECT_URL")
  extensions = [uuidOssp(map: "uuid-ossp")]
}

model User {
  id                   Int                    @id() @default(autoincrement())
  login                String                 @unique()
  email                String                 @unique()
  passwordHash         String
  createdAt            DateTime?              @default(now()) @db.Timestamp()
  confirmationInfo     UserEmailConfirmation?
  passwordRecoveryInfo UserPasswordRecovery?
  Device               Device[]
  profile              Profile?
  post                 Post[]
  Avatar               Avatar[]


  @@unique([id, login])
  @@map("users")
}

model UserEmailConfirmation {
  confirmationCode String   @default(dbgenerated("uuid_generate_v4()")) @db.Uuid()
  expirationDate   DateTime @db.Timestamp()
  isConfirmed      Boolean? @default(false)
  userId           Int      @id()
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("users_email_confirmation")
}

model Avatar {
  userId Int    @id()
  fileId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  key    String

  @@unique([userId, fileId, key])
  @@map("avatars")
}

model UserPasswordRecovery {
  recoveryCode   String   @default(dbgenerated("uuid_generate_v4()")) @db.Uuid()
  expirationDate DateTime @db.Timestamp()
  isConfirmed    Boolean? @default(false)
  userId         Int      @id()
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("users_password_recovery")
}

model Device {
  id         String   @default(dbgenerated("uuid_generate_v4()")) @db.Uuid() @id()
  ip         String
  deviceName String
  issuedAt   DateTime @db.Timestamp()
  userId     Int
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("devices")
}

model Profile {
  firstName   String?
  lastName    String?
  dateOfBirth DateTime? @db.Timestamp()
  city        String?
  country     String?
  aboutMe     String?
  user        User      @relation(fields: [userId, userName], references: [id, login], onDelete: Cascade, onUpdate: Cascade)
  userId      Int       @id()
  userName    String

  @@unique([userId, userName])
  @@map("profile")
}

model Post {
  id          String      @default(dbgenerated("uuid_generate_v4()")) @db.Uuid() @id()
  description String?
  createdAt   DateTime    @default(now()) @db.Timestamp()
  image       PostImage[]
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int

  @@map("post")
}

model PostImage {
  post       Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId     String    @db.Uuid()
  fileId     String    @id()
  key        String
  index      Int       @default(1)

  @@unique([fileId, key])
  @@map("post_image")
}